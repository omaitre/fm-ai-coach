# FM Player Tracker - Product Requirements Document

## Executive Summary
FM Player Tracker is a web application designed for Football Manager players to make data-driven squad management decisions. The tool enables users to track player attribute progression over time and evaluate player suitability for specific tactical positions based on key attribute requirements.

## Problem Statement
Football Manager players currently lack tools to:
- Systematically track how player attributes change over multiple seasons
- Objectively compare players for specific tactical roles
- Evaluate potential signings against current squad members for position-specific requirements
- Identify players who might excel in positions they're not currently playing

## Target Users
- Football Manager players who want to optimize their squad management
- FM players who make data-driven decisions about transfers and player development
- Players managing long-term saves who need to track attribute progression

## Core Functionality

### 1. Player Attribute Tracking
**User Story**: As an FM player, I want to upload screenshots of player attribute pages and track how attributes change over time.

**Requirements**:
- Upload player screenshots via drag-and-drop or file selection
- Manual entry of all player attributes (1-20 scale)
- Store multiple snapshots per player with timestamps
- Manual entry of Current Ability (CA) and Potential Ability (PA)
- View historical progression of any player

### 2. Tactical Position Management
**User Story**: As an FM player, I want to define my tactics and specify which attributes are important for each position.

**Requirements**:
- Create multiple tactical formations (e.g., "4-3-3 Gegenpress")
- Add positions using FM's exact naming conventions (e.g., "Full Back (A)", "Deep Lying Playmaker (S)")
- Select 8-12 key attributes for each position
- Support for position variants (Attack/Support/Defend)
- Ability to set one tactic as "active" for analysis

### 3. Squad Analysis by Position
**User Story**: As an FM player, I want to see which of my players are best suited for each position based on their attributes.

**Requirements**:
- Select any position from the active tactic
- View all players ranked by their suitability score (average of key attributes)
- Visual indicators for attribute quality:
  - Excellent (15+): Green
  - Good (12-14): Yellow  
  - Average (8-11): Orange
  - Poor (<8): Red
- Show each player's strongest and weakest relevant attributes
- Support for side-specific positions (Left/Right/Center)

### 4. Player Comparison
**User Story**: As an FM player, I want to compare multiple players side-by-side for a specific position.

**Requirements**:
- Compare up to 4 players simultaneously
- Display position suitability scores
- Show all key attributes for the selected position
- Visual highlighting of attribute differences

### 5. Transfer Target Evaluation
**User Story**: As an FM player considering a transfer, I want to upload a potential signing's attributes and see how they compare to my current squad.

**Requirements**:
- Upload screenshot of transfer target
- Instantly see ranking across all positions
- Compare directly with current squad members
- No need to permanently save transfer targets

## Technical Specifications

### Architecture
- **Frontend**: Single-page application with vanilla JavaScript
- **Backend**: Node.js with Express.js
- **Database**: SQLite (file-based)
- **File Storage**: Local filesystem for screenshots

### Project Structure
```
fm-player-tracker/
├── server.js              # Express backend
├── package.json           # Dependencies
├── database/              # SQLite database
├── uploads/               # Screenshot storage
└── public/               
    ├── index.html         # Player management
    ├── tactics.html       # Tactics management
    └── squad-analysis.html # Position analysis
```

### Dependencies
```json
{
  "name": "fm-player-tracker",
  "version": "1.0.0",
  "main": "server.js",
  "dependencies": {
    "express": "^4.18.2",
    "multer": "^1.4.5-lts.1",
    "sqlite3": "^5.1.6"
  }
}
```

### Database Schema

```sql
-- Player information
players (
  id INTEGER PRIMARY KEY,
  name TEXT NOT NULL,
  created_at DATETIME,
  updated_at DATETIME
)

-- Attribute snapshots
snapshots (
  id INTEGER PRIMARY KEY,
  player_id INTEGER FOREIGN KEY,
  screenshot_path TEXT,
  current_ability INTEGER,
  potential_ability INTEGER,
  snapshot_date DATE,
  created_at DATETIME
)

-- Individual attributes
attributes (
  id INTEGER PRIMARY KEY,
  snapshot_id INTEGER FOREIGN KEY,
  attribute_name TEXT,
  attribute_value INTEGER,
  attribute_category TEXT
)

-- Tactical setups
tactics (
  id INTEGER PRIMARY KEY,
  name TEXT NOT NULL,
  formation TEXT,
  created_at DATETIME,
  is_active BOOLEAN DEFAULT 0
)

-- Positions within tactics
positions (
  id INTEGER PRIMARY KEY,
  tactic_id INTEGER FOREIGN KEY,
  position_name TEXT NOT NULL,
  position_code TEXT NOT NULL,
  position_side TEXT
)

-- Key attributes for positions
position_attributes (
  id INTEGER PRIMARY KEY,
  position_id INTEGER FOREIGN KEY,
  attribute_name TEXT NOT NULL,
  weight REAL DEFAULT 1.0
)

-- Cached suitability scores
player_position_scores (
  id INTEGER PRIMARY KEY,
  player_id INTEGER FOREIGN KEY,
  position_id INTEGER FOREIGN KEY,
  snapshot_id INTEGER FOREIGN KEY,
  score REAL,
  calculated_at DATETIME
)
```

### API Endpoints

#### Player Management
- `GET /players` - List all players with snapshot counts
- `POST /upload` - Upload player screenshot
- `POST /save-player` - Save player attribute data
- `GET /player/:id` - Get player details and history

#### Tactics Management
- `GET /api/tactics` - List all tactics
- `POST /api/tactics` - Create new tactic
- `GET /api/tactics/active` - Get currently active tactic
- `POST /api/tactics/:id/activate` - Set tactic as active
- `DELETE /api/tactics/:id` - Delete tactic

#### Position Management
- `GET /api/tactics/:id/positions` - List positions for a tactic
- `POST /api/positions` - Create new position with attributes
- `DELETE /api/positions/:id` - Delete position
- `GET /api/positions/:id/rankings` - Get player rankings for position

### Key Algorithms

**Position Suitability Score**:
```
score = (sum of key attribute values) / (number of key attributes)
```
- Equal weighting for all attributes (weight = 1.0)
- Scale: 1-20 (matching FM's attribute scale)
- Calculated on player save, cached for performance

### UI/UX Requirements

**Design Principles**:
- Dark theme to match Football Manager aesthetic
- Responsive design for desktop and tablet use
- Drag-and-drop file upload for screenshots
- Clear visual hierarchy with color-coded attribute quality

**Page Layouts**:
1. **Main Page**: Player grid with upload area
2. **Tactics Page**: Tactic cards with position management
3. **Squad Analysis**: Position selector with ranked player table

### Constraints & Assumptions

**Technical Constraints**:
- No OCR functionality - all data entry is manual
- Single-user application (no authentication)
- Local storage only (no cloud features)
- Maximum 12 attributes per position

**FM-Specific Assumptions**:
- Attributes use 1-20 scale
- CA/PA displayed as stars in-game (manual entry required)
- Position naming follows FM conventions
- Players can play multiple positions

### Success Metrics
- Ability to track 50+ players across multiple seasons
- Position analysis completes in <2 seconds
- Support for 10+ different tactical formations
- Accurate ranking of players by position suitability

### OCR Functionality Specification

**User Story**: As an FM player, I want to upload a screenshot and have the attributes automatically extracted so I don't have to manually enter 30+ values.

**Requirements**:
1. **Automatic Player Name Detection**
   - Extract player name from the top of the attribute panel
   - Handle multi-word names and special characters

2. **Attribute Value Extraction**
   - Detect all Technical attributes (14 values)
   - Detect all Mental attributes (14 values)
   - Detect all Physical attributes (8 values)
   - Values are always 1-20 integers displayed in FM's standard font

3. **OCR Process Flow**
   - User uploads screenshot
   - System processes image with OCR
   - Pre-populate all form fields with detected values
   - Allow user to verify/correct before saving
   - Highlight low-confidence detections for manual review

4. **Image Requirements**
   - Support common screenshot formats (PNG, JPG)
   - Handle different screen resolutions (1080p, 1440p, 4K)
   - Work with both light and dark FM skins
   - Process both windowed and fullscreen captures

5. **Accuracy Requirements**
   - 95%+ accuracy for attribute values (critical)
   - 90%+ accuracy for player names
   - Flag any values with <80% confidence for manual verification
   - Never save without user confirmation

6. **Technical Implementation Options**
   - **Browser-based**: Tesseract.js for client-side OCR
   - **Server-based**: Python with pytesseract or Google Vision API
   - **Hybrid**: Initial detection client-side, validation server-side

7. **UI/UX for OCR**
   - Loading indicator during OCR processing
   - Visual overlay showing detected regions
   - Color coding for confidence levels:
     - Green: High confidence (>90%)
     - Yellow: Medium confidence (70-90%)
     - Red: Low confidence (<70%)
   - One-click acceptance for high-confidence results

8. **Error Handling**
   - Graceful fallback to manual entry if OCR fails
   - Clear error messages for unsupported image formats
   - Option to retry with different image processing settings

**Note**: CA/PA will still require manual entry as they appear as stars in FM

### Future Enhancements (Out of Scope)
- Weighted attributes (some more important than others)
- Multi-user support with authentication
- Cloud storage and synchronization
- Mobile app version
- Export to spreadsheet functionality
- AI-powered transfer recommendations